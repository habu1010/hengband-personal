on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    tags:
      - test.*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      - name: Setup nuget
        run: nuget restore Hengband\Hengband.sln
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          PowerShell -ExecutionPolicy RemoteSigned .\Build-Windows-Release-Package.ps1 -Version Test
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./Hengband-Test.zip
          asset_name: Hengband-upload-name.zip
          asset_content_type: application/zip
          
